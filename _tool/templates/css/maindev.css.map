{"version":3,"sources":["carousel/c-1/index.sass","../node_modules/bootstrap/scss/mixins/_breakpoints.scss","maindev.css","../bower_components/k-sass-core/dist/sass/core/mixin/_border-radius.sass","../bower_components/k-sass-core/dist/sass/core/mixin/_basic.sass","_colors.sass","map/m-1/index.sass"],"names":[],"mappings":"AAKA;EAEE,mBAAkB;EAClB,yCAAwC;EACxC,iBAAgB;CA8CK;;ACKnB;EDvDJ;IAMG,mBAAkB;IAClB,YAAW;IACX,SAAQ;IACR,QAAO;IACP,aAAY;IACZ,kBAAiB;GAuCG;EAlDvB;IAaI,mBAAkB;IAClB,YAAW;IACX,OAAM;GAAI;EAfd;IAiBI,mBAAkB;IAClB,aAAY;IACZ,OAAM;GAAI;CECb;;AFpBD;EAqBG,gBAAe;EACf,YAAW;EACX,kBAAiB;EACjB,sBAAqB;EACrB,gBAAe;CAEa;;AA3B/B;EA2BI,sBAAqB;CAAI;;AA3B7B;EA6BG,aAAY;EACZ,gBAAe;CAEQ;;AAhC1B;EAgCI,iBAAgB;CAAI;;AAhCxB;EAmCG,mBAAkB;EAClB,yCAAwC;CActB;;AAlDrB;EAsCI,sBAAqB;EACrB,QAAO;GACP,gBAAgB;CAUD;;AAlDnB;EA0CK,YAAW;EACX,aAAY;EACZ,gBAAe;EACf,eAAc;EACd,qCAAoC;EACpC,uCAA8B;EAA9B,+BAA8B;EAC9B,oBAAmB;CAEP;;AAlDjB;EAsDG,mBAAkB;CAII;;AA1DzB;EAwDI,eAAc;EACd,iBAAgB;EAChB,gBAAe;CAAI;;ACHnB;EDvDJ;IA8DG,mBAAkB;GAgBJ;CEAhB;;AF9ED;EG6BM,iBAA0B;ECE1B,iBAAkC;EAClC,oBAAoC;EACpC,oBAAqC;EACrC,mBAAmC;EJgCtC,oBKvEgU;CL+ExS;;AA1E3B;EAoEI,oBKzEgB;CL2EgB;;AAtEpC;EAsEK,eK3EyY;CL2E5W;;AAtElC;EAwEI,oBAAmB;EACnB,UAAS;EACT,kBAAiB;CAAI;;AA1EzB;EA4EG,QAAO;CAAI;;AA5Ed;EA8EG,SAAQ;CAAI;;AA9Ef;EG6BM,iBAA0B;EHsD5B,oBKxF+T;CLwF3R;;AAnFxC;EAsFK,oBK3Fe;CL2FoB;;;;;AMtFxC;EAEE,kBAAiB;CAAI","file":"maindev.css","sourcesContent":["@import \"../../_includes\";\n//////////////////////////////////////\n// CODE\n//////////////////////////////////////\n\n.canhcam-carousel-1 {\n\t.owl-nav {\n\t\ttext-align: center;\n\t\t-webkit-tap-highlight-color: transparent;\n\t\tmargin-top: 10px;\n\t\t@include media-breakpoint-up(lg) {\n\t\t\tposition: absolute;\n\t\t\twidth: 100%;\n\t\t\ttop: 50%;\n\t\t\tleft: 0;\n\t\t\theight: 40px;\n\t\t\tmargin-top: -30px;\n\t\t\t.owl-prev {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: -15px;\n\t\t\t\ttop: 0; }\n\t\t\t.owl-next {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: -15px;\n\t\t\t\ttop: 0; } }\n\t\t[class*='owl-'] {\n\t\t\tfont-size: 14px;\n\t\t\tmargin: 5px;\n\t\t\tpadding: 4px 12px;\n\t\t\tdisplay: inline-block;\n\t\t\tcursor: pointer;\n\t\t\t&:hover {\n\t\t\t\ttext-decoration: none; } }\n\t\t.disabled {\n\t\t\topacity: 0.5;\n\t\t\tcursor: default;\n\t\t\t+ .owl-dots {\n\t\t\t\tmargin-top: 10px; } }\n\n\t\t.owl-dots {\n\t\t\ttext-align: center;\n\t\t\t-webkit-tap-highlight-color: transparent;\n\t\t\t.owl-dot {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tzoom: 1;\n\t\t\t\t*display: inline;\n\t\t\t\tspan {\n\t\t\t\t\twidth: 10px;\n\t\t\t\t\theight: 10px;\n\t\t\t\t\tmargin: 5px 7px;\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\t-webkit-backface-visibility: visible;\n\t\t\t\t\ttransition: opacity 200ms ease;\n\t\t\t\t\tborder-radius: 30px;\n\t\t\t\t\t&:hover, &.active {\n\t\t\t\t\t\tspan {} } } } } }\n\n\t.owl-carousel {\n\t\t.owl-item {\n\t\t\ttext-align: center;\n\t\t\timg {\n\t\t\t\twidth: initial;\n\t\t\t\tdisplay: initial;\n\t\t\t\tmax-width: 100%; } } }\n\n\t.owl-nav {\n\t\t@include media-breakpoint-up(md) {\n\t\t\tposition: relative; }\n\t\t[class*='owl-'] {\n\t\t\t@include border-radius(0);\n\t\t\t@include pad(8px 15px);\n\t\t\tbackground: color-get($mau,xam-1);\n\t\t\t&:hover, &.active {\n\t\t\t\tbackground: color-get($mau,main);\n\t\t\t\ti {\n\t\t\t\t\tcolor: color-get($mau,den); } }\n\t\t\ti {\n\t\t\t\tline-height: 1.8rem;\n\t\t\t\theight: 0;\n\t\t\t\tfont-size: 1.2rem; } }\n\t\t.owl-prev {\n\t\t\tleft: 0; }\n\t\t.owl-next {\n\t\t\tright: 0; } }\n\t.owl-dots {\n\t\t.owl-dot {\n\t\t\tspan {\n\t\t\t\t@include border-radius(0);\n\t\t\t\tbackground: color-get($mau,xam-1); }\n\t\t\t&.active, &:hover {\n\t\t\t\tspan {\n\t\t\t\t\tbackground: color-get($mau,main); } } } } }\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n",".canhcam-carousel-1 .owl-nav {\n  text-align: center;\n  -webkit-tap-highlight-color: transparent;\n  margin-top: 10px;\n}\n\n@media (min-width: 992px) {\n  .canhcam-carousel-1 .owl-nav {\n    position: absolute;\n    width: 100%;\n    top: 50%;\n    left: 0;\n    height: 40px;\n    margin-top: -30px;\n  }\n  .canhcam-carousel-1 .owl-nav .owl-prev {\n    position: absolute;\n    left: -15px;\n    top: 0;\n  }\n  .canhcam-carousel-1 .owl-nav .owl-next {\n    position: absolute;\n    right: -15px;\n    top: 0;\n  }\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-'] {\n  font-size: 14px;\n  margin: 5px;\n  padding: 4px 12px;\n  display: inline-block;\n  cursor: pointer;\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-']:hover {\n  text-decoration: none;\n}\n\n.canhcam-carousel-1 .owl-nav .disabled {\n  opacity: 0.5;\n  cursor: default;\n}\n\n.canhcam-carousel-1 .owl-nav .disabled + .owl-dots {\n  margin-top: 10px;\n}\n\n.canhcam-carousel-1 .owl-nav .owl-dots {\n  text-align: center;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.canhcam-carousel-1 .owl-nav .owl-dots .owl-dot {\n  display: inline-block;\n  zoom: 1;\n  *display: inline;\n}\n\n.canhcam-carousel-1 .owl-nav .owl-dots .owl-dot span {\n  width: 10px;\n  height: 10px;\n  margin: 5px 7px;\n  display: block;\n  -webkit-backface-visibility: visible;\n  transition: opacity 200ms ease;\n  border-radius: 30px;\n}\n\n.canhcam-carousel-1 .owl-carousel .owl-item {\n  text-align: center;\n}\n\n.canhcam-carousel-1 .owl-carousel .owl-item img {\n  width: initial;\n  display: initial;\n  max-width: 100%;\n}\n\n@media (min-width: 768px) {\n  .canhcam-carousel-1 .owl-nav {\n    position: relative;\n  }\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-'] {\n  border-radius: 0;\n  padding-top: 8px;\n  padding-right: 15px;\n  padding-bottom: 8px;\n  padding-left: 15px;\n  background: #95a5a6;\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-']:hover, .canhcam-carousel-1 .owl-nav [class*='owl-'].active {\n  background: #2196f3;\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-']:hover i, .canhcam-carousel-1 .owl-nav [class*='owl-'].active i {\n  color: #000000;\n}\n\n.canhcam-carousel-1 .owl-nav [class*='owl-'] i {\n  line-height: 1.8rem;\n  height: 0;\n  font-size: 1.2rem;\n}\n\n.canhcam-carousel-1 .owl-nav .owl-prev {\n  left: 0;\n}\n\n.canhcam-carousel-1 .owl-nav .owl-next {\n  right: 0;\n}\n\n.canhcam-carousel-1 .owl-dots .owl-dot span {\n  border-radius: 0;\n  background: #95a5a6;\n}\n\n.canhcam-carousel-1 .owl-dots .owl-dot.active span, .canhcam-carousel-1 .owl-dots .owl-dot:hover span {\n  background: #2196f3;\n}\n\n\n\n\n.canhcam-map-1 #ccmaps {\n  min-height: 400px;\n}\n","// BASIC PROPERTIES\n@mixin bn-border-radius($pre, $suf, $values...) {\n  $top: $pre + \"-top-left\" + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom-right\" + if($suf, \"-#{$suf}\", \"\");\n  $left: $pre + \"-bottom-left\" + if($suf, \"-#{$suf}\", \"\");\n  $right: $pre + \"-top-right\" + if($suf, \"-#{$suf}\", \"\");\n  $all: $pre + if($suf, \"-#{$suf}\", \"\");\n  $values: get_array($values);\n  @if check_list($values) {\n    @if nth($values, 1) {\n      #{$top}: im-rep(#{nth($values, 1)}); }\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: im-rep(#{nth($values, 1)}); } }\n    @else {\n      @if nth($values, 2) {\n        #{$right}: im-rep(#{nth($values, 2)}); } }\n    @if length($values) == 2 {\n      @if nth($values, 1) {\n        #{$bottom}: im-rep(#{nth($values, 1)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 3 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 4 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 4) {\n        #{$left}: im-rep(#{nth($values, 4)}); } } }\n  @else {\n    @if length($values) == 1 {\n      #{$all}: im-rep(#{$values}); }\n    @else if length($values) == 2 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 1)});\n      #{$left}: im-rep(#{nth($values, 2)}); }\n    @else if length($values) == 3 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)}); }\n    @else if length($values) == 4 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)});\n      #{$left}: im-rep(#{nth($values, 4)}); } } }\n","// BASIC PROPERTIES\n@mixin bn-property($pre, $suf, $values...) {\n  $top: $pre + \"-top\" + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left: $pre + \"-left\" + if($suf, \"-#{$suf}\", \"\");\n  $right: $pre + \"-right\" + if($suf, \"-#{$suf}\", \"\");\n  $all: $pre + if($suf, \"-#{$suf}\", \"\");\n  $values: get_array($values);\n  @if check_list($values) {\n    @if nth($values, 1) {\n      #{$top}: im-rep(#{nth($values, 1)}); }\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: im-rep(#{nth($values, 1)}); } }\n    @else {\n      @if nth($values, 2) {\n        #{$right}: im-rep(#{nth($values, 2)}); } }\n    @if length($values) == 2 {\n      @if nth($values, 1) {\n        #{$bottom}: im-rep(#{nth($values, 1)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 3 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 4 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 4) {\n        #{$left}: im-rep(#{nth($values, 4)}); } } }\n  @else {\n    @if length($values) == 1 {\n      #{$all}: im-rep(#{$values}); }\n    @else if length($values) == 2 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 1)});\n      #{$left}: im-rep(#{nth($values, 2)}); }\n    @else if length($values) == 3 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)}); }\n    @else if length($values) == 4 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)});\n      #{$left}: im-rep(#{nth($values, 4)}); } } }\n","$mau: (main: #2196f3,extra: #ec8b00,front: #659f13,back: #f1c40f,cyan-1: #1abc9c,cyan-2: #16a085,la-1: #2ecc71,la-2: #27ae60,duong-1: #3498db,duong-2: #2980b9,tim-1: #9b59b6,tim-2: #8e44ad,vang-1: #f1c40f,vang-2: #f39c12,cam-1: #e67e22,cam-2: #d35400,do-1: #e74c3c,do-2: #c0392b,den-1: #34495e,den-2: #2c3e50,xam-1: #95a5a6,xam-2: #7f8c8d,hong-1: #ff9ff3,hong-2: #f368e0,trang: #ffffff,den: #000000);\n","@import \"../../_includes\";\n//////////////////////////////////////\n// CODE\n//////////////////////////////////////\n\n.canhcam-map-1 {\n\t#ccmaps {\n\t\tmin-height: 400px; } }\n"]}